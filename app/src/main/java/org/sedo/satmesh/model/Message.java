package org.sedo.satmesh.model;


import static androidx.room.ForeignKey.CASCADE;

import androidx.room.ColumnInfo;
import androidx.room.Entity;
import androidx.room.ForeignKey;
import androidx.room.Index;
import androidx.room.PrimaryKey;

/**
 * Represents a message sent or received in the application.
 * Messages can be of various types (text, image, etc.) and have different statuses
 * indicating their delivery and read state.
 */
@Entity(tableName = "message",
		foreignKeys = {
				@ForeignKey(entity = Node.class,
						parentColumns = "id", // Foreign key from Node's primary key (id)
						childColumns = "senderNodeId", // Column in Message for the sender's Node ID
						onDelete = CASCADE), // If a sender node is deleted, delete their messages
				@ForeignKey(entity = Node.class,
						parentColumns = "id", // Foreign key from Node's primary key (id)
						childColumns = "recipientNodeId", // Column in Message for the recipient's Node ID
						onDelete = CASCADE) // If a recipient node is deleted, delete associated messages
		},
		indices = {@Index(value = "payloadId", unique = true), @Index(value = "senderNodeId"), @Index("recipientNodeId")})
public class Message {

	//For messages status, we opt to use integer constants instead of enum constants
	/**
	 * Message status code when the message is pending (waiting to be sent/routed).
	 */
	public static final int MESSAGE_STATUS_PENDING = 1;
	/**
	 * Message status code when the message has been successfully delivered to the recipient.
	 */
	public static final int MESSAGE_STATUS_DELIVERED = 2;
	/**
	 * Message status code when the message sending fails (e.g., no route found, timeout).
	 */
	public static final int MESSAGE_STATUS_FAILED = 3;
	/**
	 * Message status code when the recipient has read the message.
	 */
	public static final int MESSAGE_STATUS_READ = 4;
	/**
	 * Message status code when the message is actively being routed through the mesh network
	 * but no delivery confirmation has been received yet.
	 */
	public static final int MESSAGE_STATUS_ROUTING = 5;

	//For message type, we opt to integer constants instead of enum constants
	/**
	 * Code for a text message.
	 */
	public static final int MESSAGE_TYPE_TEXT = 0;
	/**
	 * Code for an image message. (Note: Current implementation might not support this yet)
	 */
	public static final int MESSAGE_TYPE_IMAGE = 1;
	/**
	 * Code for an audio message/voice note. (Note: Current implementation might not support this yet)
	 */
	public static final int MESSAGE_TYPE_AUDIO = 2;
	/**
	 * Code for a file message. (Note: Current implementation might not support this yet)
	 */
	public static final int MESSAGE_TYPE_FILE = 3;

	@PrimaryKey(autoGenerate = true)
	private Long id;

	/**
	 * A unique identifier for the message's payload, typically generated by the sender.
	 * Used for tracking delivery and read receipts across the network.
	 */
	private Long payloadId;

	/**
	 * The content of the message. For text messages, this is the actual text.
	 * For other types (image, audio, file), this will be a local URI or path to the content.
	 */
	private String content;

	/**
	 * The timestamp when the message was sent, in milliseconds since the epoch.
	 */
	private long timestamp;

	/**
	 * The current status of the message (e.g., PENDING, DELIVERED, FAILED, READ, ROUTING).
	 * Uses MESSAGE_STATUS_* constants.
	 */
	private int status;

	/**
	 * The type of the message (e.g., TEXT, IMAGE, AUDIO, FILE).
	 * Uses MESSAGE_TYPE_* constants.
	 */
	private int type;

	/**
	 * The database ID of the sender Node.
	 * This acts as a foreign key to the 'node' table's 'id' column.
	 */
	@ColumnInfo(name = "senderNodeId")
	private Long senderNodeId;

	/**
	 * The database ID of the recipient Node.
	 * This acts as a foreign key to the 'node' table's 'id' column.
	 */
	@ColumnInfo(name = "recipientNodeId")
	private Long recipientNodeId;
}
